@{
    ViewData["TITLE"] = "C&G: Citas";
    string json_appointments = ViewData["JSON_APPOINTMENTS"] as string;
    string regexPattern = "\"([^\"]+)\":";
    var appoinments = Regex.Replace(json_appointments, regexPattern, "$1:");

    var bussiness_hours = @"[
            {
                daysOfWeek: [ 1, 2, 3, 4, 5, 6 ],
                startTime: '09:00',
                endTime: '14:00'
            },
            {
                daysOfWeek: [ 1, 2, 3, 4, 5 ],
                startTime: '17:00',
                endTime: '21:00'
            }
        ]";

    if (ViewData["BUSSINESS_HOURS"] != null) {
        bussiness_hours = ViewData["BUSSINESS_HOURS"] as string;
    }

    var services_json = "[]";
    if (ViewData["SERVICES"] != null) {
        services_json = ViewData["SERVICES"] as string;
    }

    Hairdresser? hairdresser = (ViewData["HAIRDRESSER"] != null) ? ViewData["HAIRDRESSER"] as Hairdresser : null;
    string h_token = (hairdresser != null)? hairdresser.Token : "";
    User current_user = ViewData["USER"] as User; 
    bool administrator_privileges = (bool)TempData["ADMIN_PRIV"];
    bool hairdresser_view = (bool)TempData["HAIRDRESSER_VIEW"];
}

<div id="background"></div>
<h1 class="commonTitle no_select">Citas de '@((hairdresser != null) ? hairdresser.Name : current_user.Name)'</h1>
<div id='calendar' style="background-color: white;"></div>

@section calendar_script {
    <script>

        document.addEventListener('DOMContentLoaded', function () {

            var calendarEl = document.getElementById('calendar');
            var today = GetToday();
            var adminPriv = @Json.Serialize(administrator_privileges);
            var hairdView = @Json.Serialize(hairdresser_view);

            if (hairdView && @Json.Serialize(services_json) == "[]") { // No podemos ejecutar el seleccionador de citas, sin servicios
                Swal.fire({
                    title: "Peluquería sin servicios",
                    text: "Esta peluquería no tiene servicios activos actualmente. \n" +
                          "Se deshabilitará la opción de pedir cita hasta que el local " +
                          "añada nuevos servicios a disposición del cliente.",
                    icon: "warning",
                    confirmButtonText: 'De acuerdo',
                    confirmButtonColor: '#3085d6'
                });
            }

            var calendar = new FullCalendar.Calendar(calendarEl, {
                headerToolbar: {
                    left: 'prev,next today',
                    center: 'title',
                    right: 'dayGridMonth,timeGridWeek,timeGridDay'
                },
                buttonText: {
                    today: 'Hoy',
                    day: 'Día',
                    week: 'Semana',
                    month: 'Mes'
                },
                locale: 'es',
                firstDay: 1,
                slotDuration: '00:10:00',
                snapDuration: '00:05:00',
                initialDate: today,
                nowIndicator: 'true',
                allDaySlot: false,
                contentHeight: "auto",
                navLinks: true, // can click day/week names to navigate views
                selectable: true,
                selectMirror: true,
                businessHours: @if(hairdresser_view) { @Html.Raw(bussiness_hours) } else { @Html.Raw("[]"); } ,
                select: function (arg) {
                    if (hairdView && @Json.Serialize(services_json) != "[]") {
                        var inputDate = new Date(arg.startStr);
                        var todayDate = new Date();
                        if (new Date(inputDate.toDateString()).getTime() < new Date(todayDate.toDateString()).getTime()) {
                            Swal.fire({
                                title: "No se permite solicitar una cita para un día anterior a hoy",
                                icon: "warning",
                                confirmButtonText: 'De acuerdo',
                                confirmButtonColor: '#3085d6'
                            });
                        } else {
                            var startDate = inputDate.toISOString().substring(0, 10);
                            var selectedTime = (arg.allDay == false) ? inputDate : todayDate;

                            var startTime = String(selectedTime.getHours()).padStart(2, '0') + ":" + String(selectedTime.getMinutes()).padStart(2, '0');
                            CreateSwal(startDate, startTime);
                        }
                    }
                    calendar.unselect();
                },
                eventClick: function (arg) {
                    debugger;
                    var permission = arg.el.fcSeg.eventRange.def.extendedProps.userPermission;

                    var title = (adminPriv || permission) ? arg.el.fcSeg.eventRange.def.title : "CITA";
                    var extprops = (adminPriv || permission) ? arg.el.fcSeg.eventRange.def.extendedProps : @Html.Raw("{ description: '' }");
                    var start = GetTimeFromISODate(arg.el.fcSeg.eventRange.instance.range.start);
                    var end = GetTimeFromISODate(arg.el.fcSeg.eventRange.instance.range.end);

                    CreateInfoSwal(title, extprops, start, end, adminPriv, permission, hairdView);

                },
                editable: true,
                dayMaxEvents: true, // allow "more" link when too many events
                events: @Html.Raw(appoinments)
            });

            calendar.setOption('height', 500);
            calendar.render();

            var elements = document.querySelectorAll('.fc-header-toolbar [title]');
            for (var i = 0; i < elements.length; i++) {
                elements[i].removeAttribute('title');
            }

            function GetToday() {
                var today = new Date();
                var dd = String(today.getDate()).padStart(2, '0');
                var mm = String(today.getMonth() + 1).padStart(2, '0');
                var yyyy = today.getFullYear();

                return today = yyyy + "-" + mm + "-" + dd;
            }

            function MinutesToString(minutes) {
                var horas = Math.floor(minutes / 60);
                var rest = minutes % 60;
                if (horas === 0) {
                    return rest + 'min';
                } else if (rest === 0) {
                    return horas + 'h';
                } else {
                    return horas + 'h ' + rest + 'min';
                }
            }

            function GetTimeFromISODate(fechaISO) {
                var fecha = new Date(fechaISO);
                var horas = fecha.getUTCHours();
                var minutos = fecha.getUTCMinutes();
                return horas + ":" + (minutos < 10 ? "0" : "") + minutos;
            }

            function CreateInfoSwal(title, extprops, start, end, adminPriv, permission, hairdView) {
                var privilege = adminPriv || permission;
                var allow_confirm = hairdView && adminPriv;
                Swal.fire({
                    html: "<h2 id='mySwal_info_title'>" + title + "</h2>" +
                          "<p class='mySwal_info no_select'>Hora: <b>" + start + "</b> - <b>" + end + "</b></p>" +
                          "<div id='mySwal_info_container' class='no_select'></div>" +
                          "<p class='mySwal_info no_select'>" + extprops.description + "</p>",
				    confirmButtonText: 'Eliminar cita',
                    confirmButtonColor: '#d33',
                    showConfirmButton: privilege,
				    showCancelButton: true,
                    cancelButtonText: 'De acuerdo',
                    cancelButtonColor: '#415073',
                    showDenyButton: allow_confirm,
                    denyButtonText: 'Confirmar Cita',
                    denyButtonColor: '#e7ac00',
                    reverseButtons: true,
				    didRender: function () {

                        if (privilege) {
                            var services = '';
                            $.each(extprops, function (key, value) {
                                if (key.indexOf('service_') === 0) {
                                    services += '<p class="mySwal_info no_select">- ' + value + '</p>';
                                }
                            });
					        $("#mySwal_info_container").append(services);
                        } else {
                            $("#mySwal_info_container").remove();
                        }
				    
                    },
                    preConfirm: function () {
                        return new Promise(function (resolve) {
                            resolve({
                                permission: privilege,
                                appointmentId: extprops.appoinmentId,
                                hairdresserId: extprops.hairdresserId
                            });
                        });
                    },
                    preDeny: function () {
                        return new Promise(function (resolve) {
                            resolve({
                                permission: adminPriv,
                                appointmentId: extprops.appoinmentId,
                                hairdresserId: extprops.hairdresserId
                            });
                        });
                    }
			    }).then((result) => {
                    if (result.isConfirmed && result.value.permission) {
                        $.post("/Appointments/DeleteAppointment", { idAppoinment: result.value.appointmentId, hairdresser_id: result.value.hairdresserId }, function (data) {
					        Swal.fire({
                              title: "Cita eliminada correctamente",
                              icon: 'success',
                              confirmButtonColor: '#3085d6',
                              confirmButtonText: 'De acuerdo'
                            }).then((result) => {
                                window.location.reload();
                            })
                        });
                    } else if (result.isDenied && result.value.permission) {
                        $.post("/Appointments/AppointmentConfirm", { token: "@h_token", hid: result.value.hairdresserId, apid: result.value.appointmentId, redirect: true },
                        function (data) {
                                window.location.reload();
                        });
                    }
			    });
            }

            function CreateSwal(date, time) {
                new swal({
                    title: 'Solicitud de cita',
                    showCancelButton: true,
                    confirmButtonText: 'Confirmar cita',
                    confirmButtonColor: '#3085d6',
                    cancelButtonText: 'Cancelar',
                    cancelButtonColor: '#656565',
                    customClass: "mySwal_container",
                    html:
                        '<p>Recordatorio: La solicitud de la cita no asegura su confirmación. Debe esperar a la respuesta del local.</p>' +
                        '<input type="date" id="service_date" class="mySwal_inputs mySwal_inline" min="' + date + '" value="' + date + '">' +
                        '<input type="time" id="service_time" class="mySwal_inputs mySwal_inline" value="' + time + '">' +
                        '<div class="service_container">' +
                        '<button class="service_button">Servicios</button>' +
                        '<div class="service_select">' +
                        '</div>' +
                        '</div>',
                    didRender: function () {
                        const serviceSelect = $(".service_select");
                        const services = @Html.Raw(services_json);

                        $.each(services, function (index, service) {
                            const label = $("<label>").addClass("service_label").attr("for", `service_${service.ServiceId}`);
                            const input = $("<input>").attr("type", "checkbox").attr("id", `service_${service.ServiceId}`).attr("value", service.ServiceId);
                            const serviceName = $("<span>").text(service.Name + " (" + MinutesToString(service.TiempoAprox) + ") - " + service.Price + "€");

                            label.append(input);
                            label.append(serviceName);
                            serviceSelect.append(label);
                        });

                        $('.service_button').on('click', function (e) {
                            $(this).siblings('.service_select').slideToggle();
                            $(this).toggleClass('active');
                        });

                        $(".service_label input[type='checkbox']").change(function () {
                            var count = $(".service_label input[type='checkbox']:checked").length;
                            var text = (count != 0) ? (count + " servicios seleccionados") : ("SERVICIOS");
                            $(".service_button").text(text);
                        });
                    },
                    preConfirm: function () {
                        var myIsConfirmed = true;

                        var fecha = $('#service_date').val();
                        var hora = $('#service_time').val();

                        var fechaValida = false;
                        if (fecha.match(/^\d{4}\-\d{2}\-\d{2}$/)) { // Verifica si la fecha está en formato yyyy-mm-dd
                            var partesFecha = fecha.split('-');
                            var anio = parseInt(partesFecha[0], 10);
                            var mes = parseInt(partesFecha[1], 10) - 1;
                            var dia = parseInt(partesFecha[2], 10);
                            var fechaObjeto = new Date(anio, mes, dia);
                            fechaValida = fechaObjeto.getFullYear() === anio && fechaObjeto.getMonth() === mes && fechaObjeto.getDate() === dia;
                        }

                        var horaValida = false;
                        if (hora.match(/^\d{2}\:\d{2}$/)) { // Verifica si la hora está en formato hh:mm
                            var partesHora = hora.split(':');
                            var horas = parseInt(partesHora[0], 10);
                            var minutos = parseInt(partesHora[1], 10);
                            horaValida = horas >= 0 && horas <= 23 && minutos >= 0 && minutos <= 59;
                        }

                        if (fecha == "" || hora == "" || !fechaValida || !horaValida) {
                            myIsConfirmed = false;
                            return new swal({
                                title: "Debe indicar una fecha y hora válidas",
                                icon: "error",
                                confirmButtonText: 'De acuerdo',
                                confirmButtonColor: '#3085d6'
                            });
                        } else {
                            var ahora = new Date();
                            var fechaActual = ahora.toISOString().substr(0, 10);
                            var horaActual = ahora.toISOString().substr(11, 5);

                            var fechaString = fecha.split("-");
                            var horaString = hora.split(":");
                            var fechaHora = new Date(fechaString[0], fechaString[1] - 1, fechaString[2], horaString[0], horaString[1]);

                            if (fecha <= fechaActual) {
                                var horaLimite = new Date(ahora.getTime() + (15 * 60 * 1000));
                                var horalimiteString = (horaLimite.getMinutes().toString().length == 1 ? "0" : "") + (horaLimite.getMinutes() + 1);
                                if (fechaHora < horaLimite) {
                                    myIsConfirmed = false;
                                    return new swal({
                                        title: "No se permite solicitar una cita para una hora inferior a las " + horaLimite.getHours() + ":" + horalimiteString + " del día de hoy",
                                        icon: "warning",
                                        confirmButtonText: 'De acuerdo',
                                        confirmButtonColor: '#3085d6'
                                    });
                                }
                            }
                        }

                        var checkboxes = [];
                        $('.service_label input[type="checkbox"]').each(function () {
                            if ($(this).prop('checked')) {
                                checkboxes.push($(this).val());
                            }
                        });
                        if (checkboxes.length == 0) {
                            myIsConfirmed = false;
                            return new swal({
                                title: "Debe seleccionar un servicio como mínimo",
                                icon: "error",
                                confirmButtonText: 'De acuerdo',
                                confirmButtonColor: '#3085d6'
                            });
                        }

                        return new Promise(function (resolve) {
                            resolve({
                                permission: myIsConfirmed,
                                user_id: @current_user.UserId,
                                hairdresser_id: @if (hairdresser_view) { @hairdresser.HairdresserId } else { @Html.Raw("0") },
                                date: fecha,
                                time: hora,
                                services: checkboxes
                            });
                        });
                    }
                }).then(function (result) {

                    if (result.isConfirmed == true && result.value.permission == true) {
                        var mydatatext = JSON.stringify(result.value);
                        $.post("/Appointments/CreateAppointment", { mydata: mydatatext }, function (data) {
                            window.location.reload();
                        });
                    }

                }).catch(swal.noop)
            }

        });

    </script>
}
